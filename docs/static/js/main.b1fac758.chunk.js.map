{"version":3,"sources":["Components/SplitScreen.jsx","Components/EventCardsHolder.jsx","Components/EventCard.jsx","Components/RangeSlider.jsx","Components/Switcher.jsx","App.js","serviceWorker.js","index.js"],"names":["SplitScreen","props","state","this","leftPane","rightPane","totalNumber","className","Component","defaultProps","EventCardsHolder","children","EventCard","detail","properties","mag","place","time","id","coordinates","geometry","onCardMouseOver","data-key","onClick","onCardClick","onKeyDown","onFocus","onMouseOver","e","role","tabIndex","key","Date","toLocaleString","style","height","width","transform","Math","ceil","useStyles","makeStyles","theme","root1","zIndex","root","display","margin","spacing","createMuiTheme","typography","h5","fontSize","fontWeight","fontStyle","fontFamily","dates","firstDraft","secondDraft","firstDate","secondDate","setHours","setMinutes","setSeconds","setMilliseconds","setDate","getDate","RangeSlider","classes","React","useState","value","setValue","handleChangeCommit","val","onSliderChange","toISOString","buttonGroupHandler","month","ThemeProvider","ButtonGroup","size","aria-label","variant","color","Button","Typography","JSON","stringify","rangeTypography","Slider","max","min","onChangeCommitted","onChange","event","newValue","handleChange","valueLabelDisplay","valueLabelFormat","aria-labelledby","getAriaValueText","valuetext","Switcher","name","checked","setState","FormControl","component","FormGroup","row","FormControlLabel","control","Switch","target","onSwitcherChanged","inputProps","label","labelPlacement","Map","ReactMapboxGl","accessToken","App","geojsonLayer","startDate","endDate","mapCenter","mapZoom","geojsonData","dragSearch","bounds","undefined","mapRef","createRef","hashCode","s","split","reduce","a","b","charCodeAt","requestMaker","bind","markerGenerator","onDragEndHandler","onZoomEndHandler","cardClickHandler","onStyleLoadHandler","sliderChangeHandler","earthQuakeHoverHandler","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","sixMonthsBefore","today","setMonth","getMonth","getCenter","lat","lng","zoom","getZoom","mapInstance","map","setFeatureState","source","hover","coords","lon","type","hoveredEQId","features","net","code","document","getElementById","setProperty","removeProperty","startTime","endTime","ready","getBounds","queryPart","_sw","_ne","url","fetch","data","json","dataJson","coordinateList","MapboxGL","symbolLayout","symbolPaint","visibility","circleLayout","circlePaint","geojsonObject","i","length","push","circleOnMouseEnter","circleOnMouseLeave","cards","feature","onCardMouseOut","onCard","random","options","isStopped","isPaused","switcherChangeHandler","onStyleLoad","ref","center","containerStyle","onDragEnd","onZoomEnd","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1fac758.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes from 'prop-types';\r\nimport './SplitScreen.scss';\r\n\r\nclass SplitScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const { leftPane, rightPane, totalNumber } = this.props;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"left-to-right col-md-6\">\r\n                    {leftPane}\r\n                </div>\r\n                <div className=\"counter\">\r\n                    <h1 className=\"counter-text\">{totalNumber}</h1>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {rightPane}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSplitScreen.defaultProps = {\r\n    leftPane: {},\r\n    rightPane: {},\r\n    totalNumber: 0,\r\n};\r\n\r\nSplitScreen.propTypes = {\r\n    leftPane: PropTypes.object,\r\n    rightPane: PropTypes.object,\r\n    totalNumber: PropTypes.number,\r\n};\r\n\r\nexport default SplitScreen;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport './EventCardsHolder.scss';\r\n\r\nconst EventCardsHolder = (props) => (\r\n    <div className=\"card-holder\">\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default EventCardsHolder;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './EventCard.scss';\r\nimport 'react-bootstrap';\r\n\r\nconst EventCard = (props) => {\r\n    const {\r\n        detail: {\r\n            properties: { mag, place, time }, id,\r\n            geometry: { coordinates },\r\n        }, onCardMouseOver,\r\n    } = props;\r\n    return (\r\n        <div\r\n            id={id}\r\n            data-key={id}\r\n            className=\"event-card\"\r\n            onClick={() => props.onCardClick(coordinates)}\r\n            onKeyDown={() => props.onCardClick}\r\n            onFocus={() => undefined}\r\n            onMouseOver={(e) => onCardMouseOver(e)}\r\n            role=\"button\"\r\n            tabIndex={0}\r\n        >\r\n            <div key={id} className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <p>{new Date(time).toLocaleString('se-SV')}</p>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <p>{place}</p>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div\r\n                        className=\"magnitude\"\r\n                        style={{ height: `${mag * 10}px`, width: `${mag * 10}px` }}\r\n                    >\r\n                        <p className=\"magnitude-text\" style={{ transform: `translate(0px, ${10 + Math.ceil(mag / 2)}px)` }}>{mag}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nEventCard.defaultProps = {\r\n    detail: null,\r\n    onCardMouseOver: () => { },\r\n    onCardClick: () => { },\r\n};\r\n\r\nEventCard.propTypes = {\r\n    detail: PropTypes.object,\r\n    onCardMouseOver: PropTypes.func,\r\n    onCardClick: PropTypes.func,\r\n};\r\n\r\nexport default EventCard;\r\n","/* eslint-disable react/jsx-indent-props */\r\nimport React from 'react';\r\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root1: {\r\n        width: 300,\r\n        zIndex: 1001,\r\n    },\r\n    root: {\r\n        display: 'fixed',\r\n        '& > *': {\r\n            margin: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        h5: {\r\n            fontSize: 18,\r\n            fontWeight: 500,\r\n            fontStyle: 'bold',\r\n            fontFamily: 'times new roman',\r\n        },\r\n    },\r\n});\r\n\r\nfunction valueLabelFormat(value) {\r\n    const newValue = value - 180;\r\n    if (newValue === 0) {\r\n        return 'Today';\r\n    }\r\n    return `${newValue}`;\r\n}\r\n\r\nfunction valuetext(value) {\r\n    const ret = value + 10;\r\n    return `${ret}`;\r\n}\r\n\r\nconst dates = (firstDraft, secondDraft) => {\r\n    const firstDate = new Date();\r\n    const secondDate = new Date();\r\n    firstDate.setHours(0);\r\n    firstDate.setMinutes(0);\r\n    firstDate.setSeconds(0);\r\n    firstDate.setMilliseconds(0);\r\n    secondDate.setHours(23);\r\n    secondDate.setMinutes(59);\r\n    secondDate.setSeconds(59);\r\n    secondDate.setMilliseconds(999);\r\n    firstDate.setDate(firstDate.getDate() + (firstDraft - 180));\r\n    secondDate.setDate(secondDate.getDate() + (secondDraft - 180));\r\n    return [firstDate, secondDate];\r\n};\r\n\r\nfunction rangeTypography(value) {\r\n    if (JSON.stringify(value) !== JSON.stringify([0, 180])) {\r\n        const [firstDraft, secondDraft] = value;\r\n        const [firstDate, secondDate] = dates(firstDraft, secondDraft);\r\n        return `${firstDate.toLocaleString()} - ${secondDate.toLocaleString()}`;\r\n    }\r\n    return 'Data for the last six months';\r\n}\r\n\r\nexport default function RangeSlider(props) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState([0, 180]);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleChangeCommit = (val) => {\r\n        const [firstDraft, secondDraft] = val;\r\n        const [firstDate, secondDate] = dates(firstDraft, secondDraft);\r\n        // eslint-disable-next-line react/prop-types\r\n        props.onSliderChange([firstDate.toISOString(), secondDate.toISOString()]);\r\n    };\r\n\r\n    function buttonGroupHandler(month) {\r\n        if (month === 1) {\r\n            setValue([150, 180]);\r\n            handleChangeCommit([150, 180]);\r\n        }\r\n        if (month === 2) {\r\n            setValue([120, 180]);\r\n            handleChangeCommit([120, 180]);\r\n        }\r\n        if (month === 3) {\r\n            setValue([90, 180]);\r\n            handleChangeCommit([90, 180]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root1}>\r\n            <ThemeProvider theme={theme}>\r\n                <div className={classes.root}>\r\n                    <ButtonGroup size=\"small\" aria-label=\"small outlined button group\" variant=\"contained\" color=\"primary\">\r\n                        <Button onClick={() => buttonGroupHandler(1)}>1 Month</Button>\r\n                        <Button onClick={() => buttonGroupHandler(2)}>2 Months</Button>\r\n                        <Button onClick={() => buttonGroupHandler(3)}>3 Months</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n                <Typography id=\"range-slider\" variant=\"h6\">\r\n                    {rangeTypography(value)}\r\n                </Typography>\r\n            </ThemeProvider>\r\n            <Slider\r\n                max={180}\r\n                min={0}\r\n                value={value}\r\n                onChangeCommitted={() => handleChangeCommit(value)}\r\n                onChange={(event, newValue) => handleChange(event, newValue)}\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(val) => valueLabelFormat(val)}\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={(val) => valuetext(val)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Switcher(props) {\r\n    const [state, setState] = React.useState({\r\n        checked: true,\r\n    });\r\n\r\n    const handleChange = (name) => (event) => {\r\n        setState({ ...state, [name]: event.target.checked });\r\n        props.onSwitcherChanged(state.checked);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FormControl component=\"fieldset\">\r\n                <FormGroup aria-label=\"position\" row>\r\n                    <FormControlLabel\r\n                        value=\"start\"\r\n                        control={(\r\n                            <Switch\r\n                                checked={state.checked}\r\n                                onChange={handleChange('checked')}\r\n                                value=\"checked\"\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                            />\r\n                        )}\r\n                        label=\"Search as I move the map\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                </FormGroup>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nSwitcher.defaultProps = {\r\n    onSwitcherChanged: () => { },\r\n};\r\n\r\nSwitcher.propTypes = {\r\n    onSwitcherChanged: PropTypes.func,\r\n};\r\n","\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { Component } from 'react';\r\nimport ReactMapboxGl, { GeoJSONLayer } from 'react-mapbox-gl';\r\nimport * as MapboxGL from 'mapbox-gl';\r\nimport Lottie from 'react-lottie';\r\nimport './App.css';\r\nimport SplitScreen from './Components/SplitScreen';\r\nimport EventCardsHolder from './Components/EventCardsHolder';\r\nimport EventCard from './Components/EventCard';\r\nimport * as animationData from './Extras/loading.json';\r\nimport RangeSlider from './Components/RangeSlider';\r\nimport Switcher from './Components/Switcher';\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken:\r\n    'pk.eyJ1IjoicmFnZWFnYWluc3R0aGVtYWNoaW5lIiwiYSI6ImNqcjh1dXAzZzBhNm40NWw4M2owMTA5aHMifQ.Bk987UmMmjAQbboX2PAHwA',\r\n});\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      geojsonLayer: null,\r\n      startDate: null,\r\n      endDate: null,\r\n      // mapCenter: [35, 41],\r\n      // mapZoom: [4.5],\r\n      mapCenter: [36, 37.5],\r\n      mapZoom: [10],\r\n      geojsonData: null,\r\n      dragSearch: true,\r\n      bounds: undefined,\r\n    };\r\n    this.mapRef = React.createRef();\r\n\r\n    // mapbox-gl doesn't work with Id's in string. We sould hash the incoming id from the API\r\n    // eslint-disable-next-line no-bitwise\r\n    this.hashCode = (s) => s.split('').reduce((a, b) => (((a << 5) - a) + b.charCodeAt(0)) | 0, 0);\r\n    this.requestMaker = this.requestMaker.bind(this);\r\n    this.markerGenerator = this.markerGenerator.bind(this);\r\n    this.onCardMouseOver = this.onCardMouseOver.bind(this);\r\n    this.onDragEndHandler = this.onDragEndHandler.bind(this);\r\n    this.onZoomEndHandler = this.onZoomEndHandler.bind(this);\r\n    this.cardClickHandler = this.cardClickHandler.bind(this);\r\n    this.onStyleLoadHandler = this.onStyleLoadHandler.bind(this);\r\n    this.sliderChangeHandler = this.sliderChangeHandler.bind(this);\r\n    this.earthQuakeHoverHandler = this.earthQuakeHoverHandler.bind(this);\r\n    this.defaultOptions = {\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: animationData.default,\r\n      rendererSettings: {\r\n        preserveAspectRatio: 'xMidYMid slice',\r\n      },\r\n    };\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    let sixMonthsBefore = new Date();\r\n    let today = new Date();\r\n    sixMonthsBefore.setMonth(today.getMonth() - 6);\r\n    sixMonthsBefore.setHours(0);\r\n    sixMonthsBefore.setMinutes(0);\r\n    sixMonthsBefore.setSeconds(0);\r\n    sixMonthsBefore.setMilliseconds(0);\r\n    today.setHours(23);\r\n    today.setMinutes(59);\r\n    today.setSeconds(59);\r\n    today.setMilliseconds(999);\r\n    today = today.toISOString();\r\n    sixMonthsBefore = sixMonthsBefore.toISOString();\r\n    this.setState({\r\n      startDate: sixMonthsBefore,\r\n      endDate: today,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestMaker(this.mapRef, this.state.startDate, this.state.endDate);\r\n  }\r\n\r\n  onZoomEndHandler(e) {\r\n    const { lat, lng } = e.getCenter();\r\n    const zoom = e.getZoom();\r\n    this.setState({\r\n      mapCenter: [lng, lat],\r\n      mapZoom: [zoom],\r\n    });\r\n    this.requestMaker(this.mapRef, this.state.startDate, this.state.endDate);\r\n  }\r\n\r\n  onDragEndHandler(e) {\r\n    const { lat, lng } = e.getCenter();\r\n    const zoom = e.getZoom();\r\n    this.setState({\r\n      mapCenter: [lng, lat],\r\n      mapZoom: [zoom],\r\n    });\r\n    this.requestMaker(this.mapRef, this.state.startDate, this.state.endDate);\r\n  }\r\n\r\n  onStyleLoadHandler(mapInstance) {\r\n    // let hoveredStateId = null;\r\n    this.requestMaker(mapInstance, this.state.startDate, this.state.endDate);\r\n    // debugger\r\n    // if (!this.mapRef.current) {\r\n    //   this.mapRef.state.map.on('mousemove', 'mygeolayer', (e) => {\r\n    //     if (e.features.length > 0) {\r\n    //       if (hoveredStateId) {\r\n    //         this.mapRef.setFeatureState(\r\n    //           { source: 'mygeolayer', id: hoveredStateId },\r\n    //           { hover: false },\r\n    //         );\r\n    //       }\r\n    //       hoveredStateId = e.features[0].id;\r\n    //       this.mapRef.setFeatureState(\r\n    //         { source: 'mygeolayer', id: hoveredStateId },\r\n    //         { hover: true },\r\n    //       );\r\n    //     }\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  onCardMouseOver(e) {\r\n    const { id } = e.target;\r\n    if (id) {\r\n      this.mapRef.state.map.setFeatureState(\r\n        { source: 'mygeolayer', id },\r\n        { hover: true },\r\n      );\r\n    }\r\n  }\r\n\r\n  switcherChangeHandler(state) {\r\n    this.setState({\r\n      dragSearch: !state,\r\n    });\r\n  }\r\n\r\n  cardClickHandler(coords) {\r\n    const [lat, lon] = coords;\r\n    this.setState({\r\n      mapCenter: [lat, lon],\r\n      mapZoom: [10],\r\n    });\r\n  }\r\n\r\n  sliderChangeHandler(e) {\r\n    const [startDate, endDate] = e;\r\n    if (this.state.startDate !== startDate || this.state.endDate !== endDate) {\r\n      this.setState({\r\n        startDate,\r\n        endDate,\r\n      }, () => this.requestMaker(this.mapRef, this.state.startDate, this.state.endDate));\r\n    }\r\n  }\r\n\r\n  earthQuakeHoverHandler(e) {\r\n    if (e.type === 'mouseenter') {\r\n      this.setState({\r\n        hoveredEQId: this.hashCode(e.features[0].properties.net + e.features[0].properties.code),\r\n      });\r\n      const el = document.getElementById(this.state.hoveredEQId);\r\n      el.style.setProperty('box-shadow', '10px 10px 5px black');\r\n    } else if (e.type === 'mouseleave') {\r\n      const el = document.getElementById(this.state.hoveredEQId);\r\n      el.style.removeProperty('box-shadow');\r\n    }\r\n  }\r\n\r\n  async requestMaker(mapInstance, startTime, endTime) {\r\n    if (mapInstance.state && mapInstance.state.ready) {\r\n      let bounds;\r\n      if (this.state.dragSearch) {\r\n        bounds = mapInstance.state.map.getBounds();\r\n        this.setState({\r\n          bounds,\r\n        });\r\n      } else {\r\n        bounds = this.state.bounds;\r\n      }\r\n      const queryPart = `starttime=${startTime}&endtime=${endTime}&minlatitude=${bounds._sw.lat}&maxlatitude=${bounds._ne.lat}&minlongitude=${bounds._sw.lng}&maxlongitude=${bounds._ne.lng}`;\r\n      const url = `https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&${queryPart}`;\r\n      const data = await fetch(url);\r\n      const dataJson = await data.json();\r\n      this.markerGenerator(dataJson);\r\n    }\r\n  }\r\n\r\n\r\n  markerGenerator(coordinateList) {\r\n    MapboxGL.SymbolLayout = {\r\n      'text-field': '{place}',\r\n      'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n      'text-offset': [0, 0.6],\r\n      'text-anchor': 'top',\r\n    };\r\n    const symbolLayout = MapboxGL.SymbolLayout;\r\n    MapboxGL.SymbolPaint = {\r\n      'text-color': 'black',\r\n    };\r\n    const symbolPaint = MapboxGL.SymbolPaint;\r\n    MapboxGL.CircleLayout = { visibility: 'visible' };\r\n    const circleLayout = MapboxGL.CircleLayout;\r\n    MapboxGL.CirclePaint = {\r\n      'circle-color': [\r\n        'case',\r\n        ['boolean', ['feature-state', 'hover'], false],\r\n        'rgba(0, 0, 255, 0.8)',\r\n        'rgba(255, 0, 0, 0.3)',\r\n      ],\r\n      'circle-radius': [\r\n        'interpolate', ['linear'], ['zoom'],\r\n        0, ['get', 'mag'],\r\n        22, ['*', 10, ['get', 'mag']],\r\n      ],\r\n    };\r\n    const circlePaint = MapboxGL.CirclePaint;\r\n    const geojsonObject = {\r\n      type: 'FeatureCollection',\r\n      features: [],\r\n    };\r\n    for (let i = 0; i < coordinateList.features.length; i += 1) {\r\n      geojsonObject.features.push(coordinateList.features[i]);\r\n      geojsonObject.features[i].id = this.hashCode(coordinateList.features[i].id);\r\n    }\r\n    this.setState({\r\n      geojsonLayer: <GeoJSONLayer\r\n        id=\"mygeolayer\"\r\n        source=\"mygeolayer\"\r\n        key=\"GeoJSONLayerKey\"\r\n        data={geojsonObject}\r\n        symbolLayout={symbolLayout}\r\n        symbolPaint={symbolPaint}\r\n        circleLayout={circleLayout}\r\n        circlePaint={circlePaint}\r\n        circleOnMouseEnter={this.earthQuakeHoverHandler}\r\n        circleOnMouseLeave={this.earthQuakeHoverHandler}\r\n      />,\r\n      geojsonData: coordinateList,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = null;\r\n    if (this.state.geojsonData) {\r\n      cards = this.state.geojsonData.features.map((feature) => (\r\n        <EventCard\r\n          onCardMouseOver={this.onCardMouseOver}\r\n          onCardMouseOut={this.onCard}\r\n          detail={feature}\r\n          onCardClick={this.cardClickHandler}\r\n          key={Math.ceil(Math.random() * 10000000)}\r\n        />\r\n      ));\r\n    }\r\n    return (\r\n      <SplitScreen\r\n        totalNumber={this.state.geojsonData ? this.state.geojsonData.features.length : 0}\r\n        leftPane={this.state.geojsonData\r\n          ? <EventCardsHolder>{cards}</EventCardsHolder> : (\r\n            <Lottie\r\n              options={this.defaultOptions}\r\n              height={400}\r\n              width={400}\r\n              isStopped={false}\r\n              isPaused={false}\r\n            />\r\n          )}\r\n        rightPane={\r\n          (\r\n            <div>\r\n              <div className=\"slider\">\r\n                <RangeSlider onSliderChange={this.sliderChangeHandler} />\r\n              </div>\r\n              <div className=\"switcher\">\r\n                <Switcher onSwitcherChanged={(state) => this.switcherChangeHandler(state)} />\r\n              </div>\r\n              <Map\r\n                onStyleLoad={() => this.onStyleLoadHandler(this.mapRef)}\r\n                ref={(map) => { this.mapRef = map; }}\r\n                style=\"mapbox://styles/mapbox/streets-v9\" // eslint-disable-line\r\n                center={this.state.mapCenter}\r\n                zoom={this.state.mapZoom}\r\n                containerStyle={{\r\n                  height: '100vh',\r\n                  width: '50vw',\r\n                }}\r\n                onDragEnd={this.onDragEndHandler}\r\n                onZoomEnd={this.onZoomEndHandler}\r\n              >\r\n                {this.state.geojsonLayer}\r\n              </Map>\r\n            </div>\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-use-before-define */\r\n/* eslint-disable no-console */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}